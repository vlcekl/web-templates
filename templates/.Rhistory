from sklearn.datasets import load_breast_cancer
library(reticulate)
library(reticulate)
library(reticulate)
use_python("/home/lukas/anaconda3/bin/python", required = TRUE)
use_condaenv("stats", required = TRUE)
reticulate::repl_python()
library(magrittr)
rank.plot <- . %>% sort() %>% plot()
set.seed(2020)
x <- rnorm(30)
y <- runif(30)
par(mfrow = c(2,2))
plot(x)
plot(y)
rank.plot(x)
rank.plot(y)
library(tmap)
?url
?[
?`[``
?`[`
?`%>%`
library(gamlss)
install.packages("gamlss")
library(gamlss)
?dSHASH
dSHASHo2
?comman
library(ggplot2)
?comma
?reshape
rSHASHo2
?qSHASHo2
qSHASHo2
reticulate::repl_python()
library(gamlss)
dSHASHo
.libPaths()
importr
librry(rethinking)
library(rethinking)
library(cmdstanr)
install.packages("prophet")
install.packages("whisker")
setwd("~/work/web/web-templates/templates")
library(whisker)
text <- whisker.render(template, data)
cat(text)
library(whisker)
template <- '
Hello {{name}}
You have just won ${{value}}!
{{#in_ca}}
Well, ${{taxed_value}}, after taxes
{{/in_ca}}'
data <- list(name = "Lukas",
value = 1000,
taxed_value = 10000 - (10000 * 0.4),
in_ca = TRUE)
text <- whisker.render(template, data)
cat(text)
template <-
'Hello {{name}}
You have just won ${{value}}!
{{#in_ca}}
Well, ${{taxed_value}}, after taxes
{{/in_ca}}'
data <- list(name = "Lukas",
value = 1000,
taxed_value = 10000 - (10000 * 0.4),
in_ca = TRUE)
text <- whisker.render(template, data)
cat(text)
data <- list(name = "Lukas",
value = 10000,
taxed_value = 10000 - (10000 * 0.4),
in_ca = TRUE)
text <- whisker.render(template, data)
cat(text)
data = list(myCondition: FALSE)
data = list(myCondition: FALSE)
text <- whisker.render(template, data)
cat(text)
template <-
'Hello
{{#myCondition}}
la di da
{{/myCondition}}'
data = list(myCondition: FALSE)
text <- whisker.render(template, data)
cat(text)
data = list(myCondition: TRUE)
text <- whisker.render(template, data)
cat(text)
template <-
'Hello
{{#myCondition}}
la di da
{{/myCondition}}'
data = list(myCondition = TRUE)
text <- whisker.render(template, data)
cat(text)
data = list(myCondition = FALSE)
text <- whisker.render(template, data)
cat(text)
data = list(notmyCondition = FALSE)
text <- whisker.render(template, data)
cat(text)
data = list(notmyCondition = FALSE)
text <- whisker.render(template, data)
cat(text)
data = list(notmyCondition = TRUE)
text <- whisker.render(template, data)
cat(text)
data = list(myCondition = TRUE)
text <- whisker.render(template, data)
cat(text)
data = list(users = ['a', 'b', 'c'])
data = list(users = c('a', 'b', 'c'))
data = list(users = c('a', 'b', 'c'))
template <-
'{{#users}}
{{.}}
{{/users}}'
text <- whisker.render(template, data)
cat(text)
template <-
'{{#users}}
Hello {{.}}
{{/users}}'
text <- whisker.render(template, data)
cat(text)
data = list(users = c(1, 2, 3))
template <-
'{{#users}}
Hello {{.}}
{{/users}}'
text <- whisker.render(template, data)
cat(text)
install.packages("igraph")
library(igraph)
?graph
library(igraph)
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
gr
g4
names(g4)
lenght(g4)
length(g4)
g4
plot(g4)
graph_from_literal(a--b b-+c c-+a)
graph_from_literal(a---b b--+c c--+a)
graph_from_literal(a---b, b--+c, c--+a)
gl <- graph_from_literal(a---b, b--+c, c--+a)
plot(gl)
gl <- graph_from_literal(a+-+b, b--+c, c--+a)
plot(gl)
plot(graph_from_literal(a+-+b, b--+c, c--+a))
plot(graph_from_literal(a+-+b, b--+c, c---a))
plot(graph_from_literal(a+-+b, b---c, c---a))
plot(graph_from_literal(a+--b, b---c, c---a))
plot(graph_from_literal(a---b, b---c, c---a))
plot(graph_from_literal(a+-+b, b--+c, c--+a))
plot(graph_from_literal(a+-+b, b--+c, c-+a))
plot(graph_from_literal(a+-+b, b-+c, c-+a))
plot(graph_from_literal(a++b, b-+c, c-+a))
plot(graph_from_literal(a++b, b-+c, c+a))
plot(graph_from_literal(a++b, b-+c, c-a))
plot(graph_from_literal(a++b, b-+c, c+a))
plot(graph_from_literal(a++b, b+c, c+a))
plot(graph_from_literal(a++b, b+c, c+hi))
plot(graph_from_literal(a++b, b+c, 'a==5'+hi))
?plot.graph
g <- make_ring(10)
g
plot(g)
plot(g, layout=layout_with_kk, vertex.color="green")
layout_with_kk
?layout_with_kk
?layout_with
plot(make_tree(40, children = 3, mode = "undirected"))
plot(make_tree(40, children = 3))
plot(make_tree(40, children = 3), vertex.color="green")
plot(make_tree(40, children = 3), vertex.color="navy")
plot(make_tree(40, children = 3), vertex.color="deepsky")
plot(make_tree(40, children = 3), vertex.color="sky")
plot(make_tree(40, children = 3), vertex.color="skyblue")
plot(make_tree(40, children = 3))
plot(make_tree(40, children = 3), vertex.color="pink")
plot(make_tree(40, children = 3), vertex.color="pink")
plot(make_tree(40, children = 3), vertex.color="pink")
plot(make_tree(40, children = 3), vertex.color="pink")
plot(make_tree(40, children = 3), vertex.color="pink")
plot(make_tree(40, children = 3), vertex.color="pink")
plot(make_tree(40, children = 3), vertex.color="skyblue")
?V
?E
E(g)
str(E(g))
?dendPlot
?push
?pop
